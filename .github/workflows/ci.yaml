name: CI

on: [push]

jobs:
  cvc4:
    runs-on: ubuntu-latest
    steps:
    - name: Get CVC4
      uses: actions/checkout@v2
      with:
        repository: GaloisInc/vadd-CVC4
        ref: eqrange-quant
    - name: Export CVC_HASH
      run: echo "CVC4_HASH=`git rev-parse HEAD`" >> $GITHUB_ENV
    - name: Cache CVC4
      id: cache-cvc4
      uses: actions/cache@v1
      with:
        path: cache
        key: cvc-${{ env.CVC4_HASH }}
    - name: Get Antlr
      run: ./contrib/get-antlr-3.4
      if: steps.cache-cvc4.outputs.cache-hit != 'true'
    - name: Configure
      run: ./configure.sh production --static --proofs --prefix=$PWD/dist
      if: steps.cache-cvc4.outputs.cache-hit != 'true'
    - name: Build
      working-directory: build
      run: make -j 8
      if: steps.cache-cvc4.outputs.cache-hit != 'true'
    - name: Copy to cache
      run: |
        mkdir -p cache
        cp build/bin/cvc4 cache
      if: steps.cache-cvc4.outputs.cache-hit != 'true'
    - name: cvc4 artifact
      uses: actions/upload-artifact@v1
      with:
        name: cvc4
        path: cache/cvc4
  docker:
    runs-on: ubuntu-20.04
    container: centos:7
    steps:
    - name: Install Centos 7 libraries
      run: |
        yum install -y centos-release-scl
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y devtoolset-8-gcc devtoolset-8-make gmp-devel zlib-devel git
        echo "/opt/rh/devtoolset-8/root/bin" >> $GITHUB_PATH
        echo "$HOME/.ghcup/bin" >> $GITHUB_PATH
    - name: Install GHC
      run: |
        cd $HOME
        mkdir -p  .ghcup/bin
        curl -o   .ghcup/bin/ghcup https://downloads.haskell.org/~ghcup/0.1.14.1/x86_64-linux-ghcup-0.1.14.1
        chmod a+x .ghcup/bin/ghcup
        ghcup install ghc 8.10.4
        ghcup install cabal 3.4.0.0
        ghcup set
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Cache cabal files
      uses: actions/cache@v1
      with:
        path: /home/runner/.cabal/store/ghc-${{ matrix.ghc-ver }}
        # Prefer previous ref
        key: docker-cabal-${{ matrix.ghc-ver }}-${{ github.ref }}
        # otherwise just use most recent build.
        restore-keys: docker-cabal-${{ matrix.ghc-ver }}
    - name: Cache local build files
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        # Prefer previous ref
        key: docker-local-${{ github.ref }}
        # otherwise just use most recent build.
        restore-keys: docker-local
    - name: Cabal freeze and enable werrror.
      run: |
        ln -s cabal.project.freeze.ghc.${{ matrix.ghc-ver }} cabal.project.freeze
        ln -s cabal.project.werror cabal.project.local
    - name: Cabal update
      run: cabal update
    - name: Install
      run: cabal install -j exe:reopt
    - name: Test
      run: cabal test -j reopt-tests
    - name: Create archive
      run: |
        mkdir -p dist/reopt/bin
        cp $HOME/.cabal/bin/reopt        dist/reopt/bin
        cp $HOME/.cabal/bin/reopt-relink dist/reopt/bin
        cd dist
        tar cvfz reopt.tgz reopt
    - name: Make reopt
      uses: actions/upload-artifact@v1
      with:
        name: reopt
        path: dist/reopt.tgz
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # NOTE: must list all targets in `include` here to activate them
        name: ["Linux 8.8.4"]
        include:
          - name: Linux 8.8.4
            ghc-ver: 8.8.4
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Get GHC
      run: |
        sudo apt-get install --no-install-recommends -y cabal-install-3.0 ghc-${{ matrix.ghc-ver }}
        echo "/opt/cabal/bin" >> $GITHUB_PATH
        echo "/opt/ghc/${{ matrix.ghc-ver }}/bin" >> $GITHUB_PATH
    - name: Cache
      uses: actions/cache@v1
      with:
        path: /home/runner/.cabal/store/ghc-${{ matrix.ghc-ver }}
        # Prefer previous SHA hash if it is still cached
        key: ${{ matrix.name }}-reopt-build-${{ github.sha }}
        # otherwise just use most recent build.
        restore-keys: ${{ matrix.name }}-reopt-build
    - name: Cabal freeze and enable werrror.
      run: |
        ln -s cabal.project.freeze.ghc.${{ matrix.ghc-ver }} cabal.project.freeze
        ln -s cabal.project.werror cabal.project.local
    - name: Cabal update
      run: cabal update
    - name: Install
      run: cabal install -j exe:reopt
    - name: Test
      run: cabal test -j reopt-tests
    - name: Create archive
      run: |
        mkdir -p dist/reopt/bin
        cp $HOME/.cabal/bin/reopt        dist/reopt/bin
        cp $HOME/.cabal/bin/reopt-relink dist/reopt/bin
        cd dist
        tar cvfz reopt.tgz reopt
    - name: Make reopt
      uses: actions/upload-artifact@v1
      with:
        name: reopt-ubuntu
        path: dist/reopt.tgz
  # This runs the CVC4 tests using reopt and the artifacts produced.
#  vcg-test:
#    needs: [cvc4, build]
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v2
#    - name: Get llvm
#      run: |
#        sudo apt-get update
#        sudo apt-get install llvm
#    - name: Get reopt and reopt-vcg
#      uses: actions/download-artifact@v1
#      with:
#        name: reopt
#        path: artifacts
#    - name: Get CVC4
#      uses: actions/download-artifact@v1
#      with:
#        name: cvc4
#        path: artifacts/cvc4
#    - name: Unpack reopt
#      working-directory: artifacts
#      run: tar xvfz reopt.tgz
#    - name: Update cvc4 permissions
#      run: chmod a+x artifacts/cvc4/cvc4
#    - name: VCG Tests
#      run: |
#        export PATH="$PWD/artifacts/reopt/bin:$PWD/artifacts/cvc4:$PATH"
#        cd vcg-test-programs
#        make
